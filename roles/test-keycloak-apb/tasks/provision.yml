---
- name: Test|Check that keycloak configmap exists
  shell: "oc get configmaps/{{ keycloak_configmap_name }} -o name"
  register: kc_configmap
  failed_when: keycloak_configmap_name not in kc_configmap.stdout

- name: Test|Check that keycloak secret exists
  shell: "oc get secrets/{{ keycloak_secret_name }} -o name"
  register: kc_secret
  failed_when: keycloak_secret_name not in kc_secret.stdout

- name: Test|Get Keycloak URI from configmap
  shell: "oc get {{ kc_configmap.stdout }} -o jsonpath='{.data.uri}'"
  register: kc_configmap_uri

- name: Test|Retrieve keycloak realm
  shell: "oc get {{ kc_configmap.stdout }} -o jsonpath={.data.realm}"
  register: keycloak_configmap_realm

- name: Test|Test the Keycloak URI
  uri:
    url: "{{ kc_configmap_uri.stdout }}"
    return_content: yes
    validate_certs: no
  register: webpage
  retries: 10
  delay: 20
  until: webpage.status == 200

- name: Test|Check that the keycloak login webpage is accessible
  uri:
    url: "{{ kc_configmap_uri.stdout }}/auth/"
    return_content: yes
    validate_certs: no
  register: webpage
  retries: 10
  delay: 20
  until: '"Welcome to Keycloak" in webpage.content'

- name: Test|Check that the metrics endpoint works
  uri:
    url: "{{ kc_configmap_uri.stdout }}/auth/realms/master/metrics"
    return_content: yes
    validate_certs: no
  register: webpage
  retries: 10
  delay: 20
  until: '"jvm_memory_bytes_used" in webpage.content'

- name: Test|Generate keycloak auth token
  uri:
    url: "{{ kc_configmap_uri.stdout }}/auth/realms/{{ keycloak_admin_realm_name }}/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ ADMIN_USERNAME }}&password={{ ADMIN_PASSWORD }}&grant_type=password"
    validate_certs: no
  register: keycloak_auth_response
  until: keycloak_auth_response.status == 200
  retries: 600
  delay: 2

- name: Test|Check that keycloak {{ keycloak_configmap_realm.stdout }} realm exists
  uri:
    url: "{{ kc_configmap_uri.stdout }}/auth/admin/realms/{{ keycloak_configmap_realm.stdout }}"
    method: GET
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: [200]
    return_content: yes
  register: keycloak_realm_exists
  when: USE_SHARED_SERVICE

- name: Test|Check that keycloak {{ KCDEV_USERNAME }} user exists
  uri:
    url: "{{ kc_configmap_uri.stdout }}/auth/admin/realms/{{ keycloak_configmap_realm.stdout }}/users/{{ KCDEV_USERID }}"
    method: GET
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: [200]
    return_content: yes
  register: keycloak_user_exists
  when: USE_SHARED_SERVICE