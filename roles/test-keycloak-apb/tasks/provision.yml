---
- name: Test|Check that keycloak configmap exists
  shell: "oc get configmaps/{{ keycloak_configmap_name }} -o name"
  register: kc_configmap
  failed_when: keycloak_configmap_name not in kc_configmap.stdout

- name: Test|Check that keycloak secret exists
  shell: "oc get secrets/{{ keycloak_secret_name }} -o name"
  register: kc_secret
  failed_when: keycloak_secret_name not in kc_secret.stdout

- name: Test|Test the Keycloak URI
  uri:
    url: "{{ _apb_provision_creds.URI }}"
    return_content: yes
    validate_certs: no
  register: webpage
  retries: 10
  delay: 20
  until: webpage.status == 200

- name: Test|Check that the keycloak login webpage is accessible
  uri:
    url: "{{ _apb_provision_creds.URI }}/auth/"
    return_content: yes
    validate_certs: no
  register: webpage
  retries: 10
  delay: 20
  until: '"Welcome to Keycloak" in webpage.content'

- name: Test|Check that the metrics endpoint works
  uri:
    url: "{{ _apb_provision_creds.URI }}/auth/realms/master/metrics"
    return_content: yes
    validate_certs: no
  register: webpage
  retries: 10
  delay: 20
  until: '"jvm_memory_bytes_used" in webpage.content'

- name: Generate keycloak auth token for {{ _apb_provision_creds.USERNAME }}
  uri:
    url: "{{ _apb_provision_creds.URI }}/auth/realms/{{ _apb_provision_creds.LOGIN_REALM }}/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ _apb_provision_creds.USERNAME }}&password={{ _apb_provision_creds.PASSWORD }}&grant_type=password"
    validate_certs: no
  register: keycloak_auth_response
  retries: 20
  delay: 2
  until: keycloak_auth_response.status == 503 or
         keycloak_auth_response.status in [200, 401, 403]
  ignore_errors: yes

- debug:
    var: keycloak_auth_response
    verbosity: 2

- name: Test|Check that keycloak {{ _apb_provision_creds.REALM }} realm exists
  uri:
    url: "{{ _apb_provision_creds.URI }}/auth/admin/realms/{{ _apb_provision_creds.REALM }}"
    method: GET
    validate_certs: no
    body_format: json
    headers:
      Authorization: "Bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: [200]
    return_content: yes
  register: keycloak_realm_exists

- name: Test|Check that keycloak {{ _apb_provision_creds.USERNAME }} user exists
  uri:
    url: "{{ _apb_provision_creds.URI }}/auth/admin/realms/{{ _apb_provision_creds.REALM }}/users/{{ _apb_provision_creds.USERID }}"
    method: GET
    validate_certs: no
    body_format: json
    headers:
      Authorization: "Bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: [200]
    return_content: yes
  when: USE_SHARED_SERVICE
  register: keycloak_user_exists