---
# Instead of testing that the deployment config is removed, we test that the pods
# are cleaned up afterwards
- name: Test|Check that all configmaps have been removed
  shell: oc get configmap --namespace={{ namespace }} {{ item }} 2>&1
  register: result
  retries: 50
  delay: 10
  failed_when:
    - '"not found" not in result.stdout'
  until: '"not found" in result.stdout'
  with_items:
    - '{{ keycloak_configmap_name }}'

- name: Test|Check that all secrets have been removed
  shell: oc get secret --namespace={{ namespace }} {{ item }} 2>&1
  register: result
  retries: 50
  delay: 10
  failed_when:
    - '"not found" not in result.stdout'
  until: '"not found" in result.stdout'
  with_items:
    - '{{ keycloak_secret_name }}'

- block:
  - name: Test|Check that all pods have been removed
    shell: oc get pods --namespace={{ namespace }} --selector="deploymentconfig in (keycloak,postgres)" 2>&1
    register: result
    retries: 50
    delay: 10
    failed_when:
      - '"No resources found." not in result.stdout'
    until: '"No resources found." in result.stdout'

  - name: Test|Check that the keycloak route has been removed
    shell: oc get route --namespace={{ namespace }} {{ keycloak_route_name }} 2>&1
    register: result
    retries: 50
    delay: 10
    failed_when:
      - '"not found" not in result.stdout'
    until: '"not found" in result.stdout'

  - name: Test|Check that all services have been removed
    shell: oc get service --namespace={{ namespace }} {{ item }} 2>&1
    register: result
    retries: 50
    delay: 10
    failed_when:
      - '"not found" not in result.stdout'
    until: '"not found" in result.stdout'
    with_items:
      - '{{ keycloak_service_name }}'
      - '{{ postgres_service_name }}'

  - name: Test|Check that all secrets have been removed
    shell: oc get secret --namespace={{ namespace }} {{ item }} 2>&1
    register: result
    retries: 50
    delay: 10
    failed_when:
      - '"not found" not in result.stdout'
    until: '"not found" in result.stdout'
    with_items:
      - '{{ postgres_secret_name }}'

  - name: Test|Check that all persistent volume claims have been removed
    shell: oc get pvc --namespace={{ namespace }} {{ item }} 2>&1
    register: result
    retries: 50
    delay: 10
    failed_when:
      - '"not found" not in result.stdout'
    until: '"not found" in result.stdout'
    with_items:
    - '{{ keycloak_pv_claim_name }}'
    - '{{ postgres_service_name }}'
  when: not USE_SHARED_SERVICE

- block:
  - name: Test|Check that keycloak {{ keycloak_configmap_realm.stdout }} realm exists
    uri:
      url: "{{ kc_configmap_uri.stdout }}/auth/admin/realms/{{ keycloak_configmap_realm.stdout }}"
      method: GET
      validate_certs: no
      body_format: json
      headers:
        Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
      status_code: [200]
      return_content: yes
    register: keycloak_realm_exists

  - name: Test|Check that keycloak {{ KCDEV_USERNAME }} user exists
    uri:
      url: "{{ kc_configmap_uri.stdout }}/auth/admin/realms/{{ keycloak_configmap_realm.stdout }}/users/{{ KCDEV_USERID }}"
      method: GET
      validate_certs: no
      body_format: json
      headers:
        Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
      status_code: [404]
      return_content: yes
    register: keycloak_user_exists
  when: USE_SHARED_SERVICE