- name: generate truststore password
  shell: head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo ''
  register: gen_truststore_password

- name: create persistent volume claim for metrics
  k8s_v1_persistent_volume_claim:
    name: keycloak-metrics
    state: present
    namespace: '{{ namespace }}'
    access_modes: [ReadWriteMany]
    spec_resources_requests:
      storage: 10Gi
  register: create_volume_claim

- name: create deployment config
  openshift_v1_deployment_config:
    name: keycloak
    namespace: '{{ namespace }}'
    labels:
      app: keycloak
      service: keycloak
      name: keycloak
      mobile: enabled
    replicas: 1
    selector:
      app: keycloak
      service: keycloak
    spec_template_metadata_labels:
      app: keycloak
      service: keycloak
    volumes:
    - name: keycloak-metrics
      persistent_volume_claim:
        claim_name: keycloak-metrics
    containers:
    - env:
      - name: KEYCLOAK_USER
        value: '{{ ADMIN_NAME }}'
      - name: KEYCLOAK_PASSWORD
        value: '{{ ADMIN_PASSWORD }}'
      - name: KEYCLOAK_PROMETHEUS_EVENTS_DIR
        value: /opt/jboss/metrics
      - name: POSTGRES_USER
        value_from:
          secret_key_ref:
            name: '{{ postgres_secret_name }}'
            key: database-user
      - name: POSTGRES_PASSWORD
        value_from:
          secret_key_ref:
            name: '{{ postgres_secret_name }}'
            key: database-password
      - name: POSTGRES_DATABASE
        value_from:
          secret_key_ref:
            name: '{{ postgres_secret_name }}'
            key: database-name
      - name: JAVA_OPTS
        value: -Djavax.net.ssl.trustStore=/opt/jboss/keycloak/keystore/application.keystore -Djavax.net.ssl.trustStorePassword={{ gen_truststore_password.stdout }} -Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true
      image: 'docker.io/jboss/keycloak-openshift:{{ keycloak_image_tag }}'
      name: keycloak
      ports:
      - container_port: 8080
        protocol: TCP
      volume_mounts:
      - mount_path: /opt/jboss/metrics
        name: keycloak-metrics
        sub_path: events/
      - mount_path: /opt/jboss/keycloak/providers/
        name: keycloak-metrics
        sub_path: providers/
      - mount_path: /opt/jboss/keycloak/keystore/
        name: keycloak-metrics
        sub_path: keystore/

- name: create metrics deployment config
  openshift_v1_deployment_config:
    name: keycloak-metrics
    namespace: '{{ namespace }}'
    labels:
      app: keycloak
      service: keycloak-metrics
      name: keycloak-metrics
    replicas: 1
    selector:
      app: keycloak
      service: keycloak-metrics
    spec_template_metadata_labels:
      app: keycloak
      service: keycloak-metrics
    volumes:
    - name: keycloak-metrics
      persistent_volume_claim:
        claim_name: keycloak-metrics
    containers:
    - image: 'docker.io/larscheidschmitzhermes/prometheus-filesystem-exporter:0.3.1'
      name: prometheus-fs-exporter
      command: ['./prometheus-filesystem-exporter']
      args: ['--listen-addr=:8081', '--metrics-directory=/metrics/']
      ports:
      - container_port: 8081
        target_port: 80
        protocol: TCP
      volume_mounts:
      - mount_path: /metrics
        name: keycloak-metrics
        sub_path: events/
  register: dc_create

- name: create keycloak service
  k8s_v1_service:
    name: keycloak
    namespace: '{{ namespace }}'
    labels:
      app: keycloak
      service: keycloak
      mobile: enabled
    selector:
      app: keycloak
      service: keycloak
    ports:
    - name: web
      port: 80
      target_port: 8080

- name: create keycloak-metrics service
  k8s_v1_service:
    name: keycloak-metrics
    namespace: '{{ namespace }}'
    labels:
      app: keycloak
      service: keycloak-metrics
      mobile: enabled
    annotations:
      org.feedhenry.mcp/prometheus: "plain"
    selector:
      app: keycloak
      service: keycloak-metrics
    ports:
    - name: web
      port: 80
      target_port: 8081

- name: create keycloak route
  openshift_v1_route:
    name: keycloak
    namespace: '{{ namespace }}'
    labels:
      app: keycloak
      service: keycloak
      mobile: enabled
    to_name: keycloak
    spec_port_target_port: web

- name: "Retrieve route to keycloak"
  shell: "oc get routes keycloak -n '{{ namespace }}' | grep -v NAME | awk '{print $2}'"
  register: keycloak_route

- copy:
    src: keycloak-monitoring-prometheus.jar
    dest: /tmp/keycloak-monitoring-prometheus-master.jar

- shell: oc get pods -n {{ namespace }} | grep keycloak | grep -v keycloak-metrics | grep -v postgres | grep -v deploy | awk '{ print $1 }'
  register: get_pods

- name: Copy jar into keycloaks metrics
  shell: oc cp /tmp/keycloak-monitoring-prometheus-master.jar {{ namespace }}/{{ get_pods.stdout }}:/opt/jboss/keycloak/providers/
  register: copy_jar
  retries: 60
  until: copy_jar.rc == 0
  delay: 5

- name: Retrieve OpenShift cluster certificate
  shell: echo -n “” | openssl s_client -connect $KUBERNETES_PORT_443_TCP_ADDR:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/cert.pem

- copy:
    src: configure-keystore.sh
    dest: /tmp/configure-keystore.sh

- name: Copy certificate into keystore directory
  shell: oc cp /tmp/cert.pem {{ namespace }}/{{ get_pods.stdout }}:/opt/jboss/keycloak/keystore/cert.pem
  register: copy_cert
  retries: 60
  until: copy_cert.rc == 0
  delay: 5

- name: Copy script into keystore directory
  shell: oc cp /tmp/configure-keystore.sh {{ namespace }}/{{ get_pods.stdout }}:/opt/jboss/keycloak/keystore/
  register: copy_startup_script
  until: copy_startup_script.rc == 0

- name: Run configure keystore script
  shell: oc exec --namespace {{ namespace }} {{ get_pods.stdout }} bash /opt/jboss/keycloak/keystore/configure-keystore.sh {{ gen_truststore_password.stdout }}

- name: "Generate keycloak auth token"
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/realms/master/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ ADMIN_NAME }}&password={{ ADMIN_PASSWORD }}&grant_type=password"
    validate_certs: no
  register: keycloak_auth_response
  until: keycloak_auth_response.status == 200
  retries: 600
  delay: 2

- name: Create keycloak service account
  k8s_v1_service_account:  
    name: keycloak  
    namespace: "{{ namespace }}"
    annotations:                  
      serviceaccounts.openshift.io/oauth-redirectreference.keycloak: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"keycloak"}}'
      
- name: Get keycloak client secret
  shell: oc sa get-token keycloak -n={{ namespace }}
  register: keycloak_client_secret

- name: Generate namespace specific realm
  template:
    src: namespace_realm.json.j2
    dest: /tmp/namespace_realm.json

- name: "Create {{ namespace }} realm"
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms"
    method: POST
    body: "{{ lookup('file','/tmp/namespace_realm.json') }}"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201

- name: "Generate Push URI"
  shell: "oc get routes keycloak -n '{{ namespace }}' | grep -v NAME | awk '{print $2}' | cut -c 9-"
  register: push_route

- name: Generate push specific realm
  template:
    src: push_realm.json.j2
    dest: /tmp/push_realm.json

- name: "Create UPS realm"
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms"
    method: POST
    body: "{{ lookup('file','/tmp/push_realm.json') }}"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201

-
  name: Generate Username
  shell: tr -d -c "a-zA-Z" < /dev/urandom | head -c 20
  register: generated_username

-
  name: Generate Password
  shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20
  register: generated_password

-
  name: "Create {{ generated_username.stdout }} client in realm {{ namespace }}"
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms/{{ namespace }}/clients"
    method: POST
    body: "{\"id\": \"{{ generated_username.stdout }}\", \"secret\": \"{{ generated_password.stdout }}\", \"redirectUris\":[\"http://localhost:*\"], \"webOrigins\":[\"http://localhost:8100\"] }"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201

-
  name: "Create {{ generated_username.stdout }}-bearer client in realm {{ namespace }}"
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms/{{ namespace }}/clients"
    method: POST
    body: "{\"id\": \"{{ generated_username.stdout }}-bearer\", \"secret\": \"{{ generated_password.stdout }}\",\"bearerOnly\":true}"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201

-
  name: Get installation details bearer
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms/{{ namespace }}/clients/{{ generated_username.stdout }}-bearer/installation/providers/keycloak-oidc-keycloak-json"
    method: GET
    validate_certs: no
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 200
    return_content: yes
  register: installation_bearer

-
  name: Get installation details
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms/{{ namespace }}/clients/{{ generated_username.stdout }}/installation/providers/keycloak-oidc-keycloak-json"
    method: GET
    validate_certs: no
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 200
    return_content: yes
  register: installation_text

- set_fact: installation="{{ installation_text.content | from_json }}"

- name: Create client config from template
  template:
    src: installation.json.j2
    dest: /tmp/installation.json

- name: Retrieve client config
  shell: cat /tmp/installation.json
  register: installation_text

- set_fact: installation="{{ installation_text.stdout | from_json }}"
- set_fact: installationbearer="{{ installation_bearer.content | from_json }}"

- name: Create keycloak bearer client template
  template:
    src: secret.yml.j2
    dest: /tmp/secret.yaml

- name: Create keycloak public client secret
  shell: oc create -f /tmp/secret.yaml -n {{ namespace }}

- name: delete secret template file
  file: path=/tmp/secret.yaml state=absent

- name: encode admin user credentials
  asb_encode_binding:
    fields:
      ADMIN_NAME: "{{ ADMIN_NAME }}"
      ADMIN_PASSWORD: "{{ ADMIN_PASSWORD }}"
      TRUSTSTORE_PASSWORD: "{{ gen_truststore_password.stdout }}"
