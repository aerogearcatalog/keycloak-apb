---
- name: Generate KC development password
  shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20
  register: kcdev_password

- name: Generate keycloak auth token for {{ ADMIN_USERNAME }}
  uri:
    url: "{{ KEYCLOAK_HOST }}/auth/realms/{{ keycloak_admin_realm_name }}/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ ADMIN_USERNAME }}&password={{ ADMIN_PASSWORD }}&grant_type=password"
    validate_certs: no
  register: keycloak_auth_response
  until: keycloak_auth_response.status == 200
  retries: 600
  delay: 2

- set_fact:
    KCDEV_USERNAME: '{{ namespace }}'
    KCDEV_PASSWORD: '{{ kcdev_password.stdout }}'
# TODO for now username is same as namespace, we need to change it with openshift user and use SSO

- name: Create {{ KCDEV_USERNAME }} user in {{ KEYCLOAK_REALM }} realm
  uri:
    url: "{{ KEYCLOAK_HOST }}/auth/admin/realms/{{ KEYCLOAK_REALM }}/users"
    method: POST
    body: '{"enabled":true,"attributes":{},"username":"{{ KCDEV_USERNAME }}","emailVerified":"","email":"","firstName":"","lastName":""}'
    validate_certs: no
    body_format: json
    headers:
      Authorization: "Bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201
  register: kcdev_user_created

- name: Change {{ KCDEV_USERNAME }} password in {{ KEYCLOAK_REALM }} realm
  uri:
    url: "{{ kcdev_user_created.location }}/reset-password"
    method: PUT
    body: '{"type":"password","value":"{{ KCDEV_PASSWORD }}","temporary":false}'
    validate_certs: no
    body_format: json
    headers:
      Authorization: "Bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 204

- name: Get all available clients in {{ KEYCLOAK_REALM }} realm
  uri:
    url: "{{ KEYCLOAK_HOST }}/auth/admin/realms/{{ KEYCLOAK_REALM }}/clients"
    method: GET
    validate_certs: no
    body_format: json
    headers:
      Authorization: "Bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 200
  register: kcdev_realm_clients

- set_fact:
    kcdev_realm_mgmt_client: "{{ kcdev_realm_clients.json | json_query(kcdev_realm_mgmt_jq) | first}}"
    KCDEV_USERID: "{{ kcdev_user_created.location.split('/')[-1] }}"

- name: Get all available roles of {{ kcdev_realm_mgmt_client.name }} client
  uri:
    url: "{{ KEYCLOAK_HOST }}/auth/admin/realms/{{ KEYCLOAK_REALM }}/clients/{{ kcdev_realm_mgmt_client.id }}/roles"
    method: GET
    validate_certs: no
    body_format: json
    headers:
      Authorization: "Bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 200
  register: kcdev_realm_mgmt_roles

- name: Add {{ kcdev_realm_mgmt_client.id }} roles to {{ KCDEV_USERNAME }} user
  uri:
    url: "{{ kcdev_user_created.location }}/role-mappings/clients/{{ kcdev_realm_mgmt_client.id }}"
    method: POST
    body: '{{ kcdev_realm_mgmt_roles.json }}'
    validate_certs: no
    body_format: json
    headers:
      Authorization: "Bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 204

- name: Generate keycloak auth token for {{ KCDEV_USERNAME }}
  uri:
    url: "{{ KEYCLOAK_HOST }}/auth/realms/{{ KEYCLOAK_REALM }}/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ KCDEV_USERNAME }}&password={{ KCDEV_PASSWORD }}&grant_type=password"
    validate_certs: no
  register: kcdev_realm_user_response
  until: kcdev_realm_user_response.status == 200
  retries: 600
  delay: 2

- name: Get keycloak whoami {{ KCDEV_USERNAME }}
  uri:
    url: "{{ KEYCLOAK_HOST }}/auth/admin/{{ KEYCLOAK_REALM }}/console/whoami"
    method: GET
    validate_certs: no
    body_format: json
    headers:
      Authorization: "Bearer {{ kcdev_realm_user_response.json.access_token }}"
    status_code: 200
  register: kcdev_realm_user_whoami
  failed_when: kcdev_realm_user_whoami.json.userId != KCDEV_USERID

- k8s_v1_secret:
    name: "{{ keycloak_secret_name }}"
    namespace: "{{ namespace }}"
    labels:
      name: '{{ keycloak_secret_name }}'
      serviceName: "{{ keycloak_service_name }}"
      serviceInstanceID: '{{ _apb_service_instance_id }}'
      mobile: enable
    string_data:
      user_id: "{{ KCDEV_USERID }}"
      user_name: "{{ KCDEV_USERNAME }}"
      user_passwd: "{{ KCDEV_PASSWORD }}"

- name: Encode APB provision credentials
  asb_encode_binding:
    fields:
      USERID: "{{ KCDEV_USERID }}"
      USERNAME: "{{ KCDEV_USERNAME }}"
      PASSWORD: "{{ KCDEV_PASSWORD }}"
      LOGIN_REALM: "{{ KEYCLOAK_REALM }}"
      REALM: "{{ KEYCLOAK_REALM }}"
      URI: "{{ KEYCLOAK_HOST }}"
  when: encode_asb_binding

- name: Populate APB provision credentials
  set_fact:
    _apb_provision_creds: "{{ _apb_provision_creds|default({}) | combine( {item.name: item.value} ) }}"
  with_items:
    - {name: USERID, value: '{{ KCDEV_USERID }}'}
    - {name: USERNAME, value: '{{ KCDEV_USERNAME }}'}
    - {name: PASSWORD, value: '{{ KCDEV_PASSWORD }}'}
    - {name: LOGIN_REALM, value: '{{ KEYCLOAK_REALM }}'}
    - {name: REALM, value: '{{ KEYCLOAK_REALM }}'}
    - {name: URI, value: "{{ KEYCLOAK_HOST }}"}
  when: not encode_asb_binding
  no_log: yes
