---
- set_fact:
    kc_namespace_configmap: "oc get configmaps/{{ keycloak_configmap_name }} --namespace={{ namespace }}"
    kc_namespace_secret: "oc get secrets --namespace={{ namespace }}"
# TODO when openshift/ansible-service-broker#818 we should get secrets from _apb_provision_creds

- name: Get Keycloak URI from configmap
  shell: "{{ kc_namespace_configmap }} -o jsonpath={.data.uri}"
  register: kc_configmap_uri

- name: Get the client service realm
  shell: "{{ kc_namespace_configmap }} -o jsonpath={.data.realm}"
  register: kc_configmap_realm

- name: Get the client service public user
  shell: "{{ kc_namespace_configmap }} -o jsonpath={.data.public_client_id}"
  register: kc_configmap_user

###
- name: Get the user id
  shell: "{{ kc_namespace_secret }} -o jsonpath={.items[*].data.userId} | base64 --decode"
  register: kcdev_userid

- name: Get the username
  shell: "{{ kc_namespace_secret }} -o jsonpath={.items[*].data.userName} | base64 --decode"
  register: kcdev_username

- name: Get the password
  shell: "{{ kc_namespace_secret }} -o jsonpath={.items[*].data.userPasswd} | base64 --decode"
  register: kcdev_password
# TODO when openshift/ansible-service-broker#818 we should get secrets from _apb_provision_creds

- name: Generate KeyCloak auth token
  uri:
    url: "{{ kc_configmap_uri.stdout }}/auth/realms/{{ kc_configmap_realm.stdout }}/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ kcdev_username.stdout }}&password={{ kcdev_password.stdout }}&grant_type=password"
    validate_certs: no
  register: kc_auth_response
  retries: 20
  delay: 2
  until: kc_auth_response.status == 503 or
         kc_auth_response.status in [200, 401, 403]
  ignore_errors: yes

- debug:
    var: kc_auth_response
    verbosity: 2

- name: Delete client {{ kc_configmap_user.stdout }} in realm {{ kc_configmap_realm.stdout }}
  uri:
    url: "{{ kc_configmap_uri.stdout }}/auth/admin/realms/{{ kc_configmap_realm.stdout }}/clients/{{ item }}"
    method: DELETE
    validate_certs: no
    headers:
      Authorization: "bearer {{ kc_auth_response.json.access_token }}"
    status_code: 204
    return_content: yes
  when: kc_auth_response.status != 503
  with_items:
    - "{{ kc_configmap_user.stdout }}"
    - "{{ kc_configmap_user.stdout }}-bearer"

- name: Delete {{ kcdev_username.stdout }} user in realm {{ kc_configmap_realm.stdout }}
  uri:
    url: "{{ kc_configmap_uri.stdout }}/auth/admin/realms/{{ kc_configmap_realm.stdout }}/users/{{ item }}"
    method: DELETE
    validate_certs: no
    headers:
      Authorization: "bearer {{ kc_auth_response.json.access_token }}"
    status_code: 204
    return_content: yes
  when: kc_auth_response.status != 503
  with_items:
    - "{{ kcdev_userid.stdout }}"