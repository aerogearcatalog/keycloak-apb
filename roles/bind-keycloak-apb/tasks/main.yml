---
- name: get tag
  shell: echo '{{ vars._apb_provision_creds.URI }}' | cut -f2 -d'-'
  register: tag_out

- set_fact:
    TAG: "{{ tag_out.stdout }}"

- set_fact:
    keycloak_service_name: keycloak-{{ TAG }}
    postgres_service_name: postgres-{{ TAG }}
    keycloak_route_name: keycloak-{{ TAG }}
    keycloak_configmap_name: keycloak-{{ TAG }}
    keycloak_secret_name: keycloak-{{ TAG }}
    postgres_secret_name: keycloak-postgres-{{ TAG }}
    keycloak_pv_claim_name: keycloak-metrics-{{ TAG }}
    postgres_pv_claim_name: postgres-{{ TAG }}

- name: Generate client id
  shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20
  register: generated_client_id

- name: Generate client secret
  shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20
  register: generated_client_secret

- name: Get keycloak service instance name
  shell: oc get serviceinstances -n {{ namespace }} -o json | jq '.items[] | select(.spec.externalID=="{{ _apb_service_instance_id }}") | .metadata.name'  | cut -f2 -d'"'
  register: keycloak_svc_name

- set_fact:
    KEYCLOAK_NAME: "{{ keycloak_svc_name.stdout }}"
    CLIENT_SECRET: "{{ generated_client_secret.stdout }}"
    GENERATED_CLIENT_ID: "{{ generated_client_id.stdout }}"

- name: Generate keycloak auth token for {{ _apb_provision_creds.USERNAME }}
  uri:
    url: "{{ _apb_provision_creds.URI }}/auth/realms/{{ _apb_provision_creds.LOGIN_REALM }}/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ _apb_provision_creds.USERNAME }}&password={{ _apb_provision_creds.PASSWORD }}&grant_type=password"
    validate_certs: no
  register: keycloak_auth_response
  retries: 20
  delay: 2
  until: keycloak_auth_response.status == 503 or
         keycloak_auth_response.status in [200, 401, 403]
  ignore_errors: yes

- debug:
    var: keycloak_auth_response
    verbosity: 2

# Create Keycloak client
- name: Generate {{ CLIENT_TYPE }} client template
  template:
    src: client_{{ CLIENT_TYPE }}.json.j2
    dest: /tmp/client.json
  when: keycloak_auth_response.status != 503

- name: Create {{ CLIENT_TYPE }} client in {{ _apb_provision_creds.REALM }} realm
  uri:
    url: "{{ _apb_provision_creds.URI }}/auth/admin/realms/{{ _apb_provision_creds.REALM }}/clients"
    method: POST
    body: "{{ lookup('file','/tmp/client.json') }}"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "Bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: [201, 409]
  when: keycloak_auth_response.status != 503
  register: create_keycloak_client

- name: Check for client conflict
  fail: msg="{{ CLIENT_ID }} client already exists in the {{ _apb_provision_creds.REALM }} realm"
  when: create_keycloak_client.status == 409

- name: Delete {{ CLIENT_TYPE }} client template file
  file: path=/tmp/client.json state=absent

- name: Get {{ CLIENT_TYPE }} client installation details
  uri:
    url: "{{ _apb_provision_creds.URI }}/auth/admin/realms/{{ _apb_provision_creds.REALM }}/clients/{{ GENERATED_CLIENT_ID }}/installation/providers/keycloak-oidc-keycloak-json"
    method: GET
    validate_certs: no
    headers:
      Authorization: "Bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 200
    return_content: yes
  register: installation_details

- set_fact: CLIENT_CONFIG="{{ installation_details.content | from_json }}"

# Create keycloak client secret
- name: Creating {{ CLIENT_ID }} client secret
  k8s_v1_secret:
    name: "{{ keycloak_secret_name }}-{{ CLIENT_ID | lower }}-{{ CLIENT_TYPE }}"
    namespace: '{{ namespace }}'
    annotations:
      configType: "json"
    labels:
      mobile: enabled
      serviceName: "{{ keycloak_service_name }}"
      serviceInstanceID: '{{ _apb_service_instance_id }}'
      clientId: "{{ CLIENT_ID }}"
    string_data:
      clientName: "{{ CLIENT_ID }}"
      clientId: "{{ CLIENT_ID }}-{{ CLIENT_TYPE }}"
      id: "{{ GENERATED_CLIENT_ID }}"
      uri: "{{ _apb_provision_creds.URI }}/auth"
      config: "{{ CLIENT_CONFIG | to_nice_json }}"
      name: "{{ keycloak_service_name }}"
      type: "keycloak"

- set_fact: 
    REALM_ANNOTATION: "org.aerogear.binding.{{ KEYCLOAK_NAME }}/realm"
    URI_ANNOTATION: "org.aerogear.binding.{{ KEYCLOAK_NAME }}/uri"
    REALM_URI_ANNOTATION: "org.aerogear.binding.{{ KEYCLOAK_NAME }}/realm-uri"

- set_fact: 
    PUBLIC_CLIENT_ANNOTATION: "org.aerogear.binding.{{ KEYCLOAK_NAME }}/public-client"
  when: CLIENT_TYPE == "public"
   
# Annotate the mobile client 
- name: Annotate client {{ CLIENT_ID }}
  shell: 'oc annotate mobileclient {{ CLIENT_ID }} {{ item }} --overwrite=true -n {{ namespace }}'
  ignore_errors: yes
  with_items:
    - "{{ REALM_ANNOTATION }}='{\"label\": \"Keycloak Realm\", \"value\": \"{{ _apb_provision_creds.REALM }}\", \"type\": \"string\"}'"
    - "{{ URI_ANNOTATION }}='{\"label\": \"Keycloak URL\", \"value\": \"{{ _apb_provision_creds.URI }}\", \"type\": \"href\"}'"
    - "{{ REALM_URI_ANNOTATION }}='{\"label\": \"Keycloak Realm URL\", \"value\": \"{{ _apb_provision_creds.URI }}/auth/admin/master/console/#/realms/{{ _apb_provision_creds.REALM }}\", \"type\": \"href\"}'"
    - "{{ PUBLIC_CLIENT_ANNOTATION | default({}) }}='{\"label\": \"Public Client URL\", \"value\": \"{{ _apb_provision_creds.URI }}/auth/admin/master/console/#/realms/{{ _apb_provision_creds.REALM }}/clients/{{ GENERATED_CLIENT_ID }}\", \"type\": \"href\"}'"

- name: Encode {{ CLIENT_ID }} APB bind credentials
  asb_encode_binding:
    fields:
      clientName: "{{ CLIENT_ID }}"
      clientId: "{{ CLIENT_ID }}-{{ CLIENT_TYPE }}"
      id: "{{ GENERATED_CLIENT_ID }}"
      uri: "{{ _apb_provision_creds.URI }}"
      config: "{{ CLIENT_CONFIG | to_json }}"
      keycloakName: "{{ KEYCLOAK_NAME }}"
  when: encode_asb_binding

- name: Populate {{ CLIENT_ID }} APB bind credentials
  set_fact:
    _apb_bind_creds: "{{ _apb_bind_creds|default({}) | combine( {item.name: item.value} ) }}"
  with_items:
    - {name: clientName, value: '{{ CLIENT_ID }}'}
    - {name: clientId, value: '{{ CLIENT_ID }}-{{ CLIENT_TYPE }}'}
    - {name: id, value: '{{ GENERATED_CLIENT_ID }}'}
    - {name: config, value: '{{ CLIENT_CONFIG | to_json }}'}
    - {name: keycloakName, value: '{{ KEYCLOAK_NAME }}'}
  when: not encode_asb_binding
  no_log: yes