- name: Generate client id
  shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20
  register: generated_client_id

- name: Generate client secret
  shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20
  register: generated_client_secret

- name: Retrieve route to keycloak
  shell: "oc get configmaps/{{keycloak_service_name}} -n {{ namespace }} -o jsonpath={.data.uri}"
  register: keycloak_configmap_uri

- name: Retrieve {{ _apb_provision_creds.USERNAME }} user realm
  shell: "oc get configmaps/{{keycloak_service_name}} -n {{ namespace }} -o jsonpath={.data.realm}"
  register: keycloak_configmap_realm

- set_fact:
    KEYCLOAK_REALM: "{{ keycloak_configmap_realm.stdout }}"
    KEYCLOAK_URI: "{{ keycloak_configmap_uri.stdout }}"
    CLIENT_ID: "{{ generated_client_id.stdout }}"
    CLIENT_SECRET: "{{ generated_client_secret.stdout }}"
    KCADM_REALM: "{{ _apb_provision_creds.IS_SHARED | ternary(KEYCLOAK_REALM,keycloak_admin_realm_name) }}"

- name: Generate keycloak auth token for {{ _apb_provision_creds.USERNAME }}
  uri:
    url: "{{ KEYCLOAK_URI }}/auth/realms/{{ KCADM_REALM }}/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ _apb_provision_creds.USERNAME }}&password={{ _apb_provision_creds.PASSWORD }}&grant_type=password"
    validate_certs: no
  register: keycloak_auth_response
  retries: 20
  delay: 2
  until: keycloak_auth_response.status == 503 or
         keycloak_auth_response.status in [200, 401, 403]
  ignore_errors: yes

- debug:
    var: keycloak_auth_response
    verbosity: 2

- name: Generate client bearer from template
  template:
    src: client_bearer.json.j2
    dest: /tmp/client_bearer.json
  when: keycloak_auth_response.status != 503

- name: Create {{ service }}-bearer client in {{ KEYCLOAK_REALM }} realm
  uri:
    url: "{{ KEYCLOAK_URI }}/auth/admin/realms/{{ KEYCLOAK_REALM }}/clients"
    method: POST
    body: "{{ lookup('file','/tmp/client_bearer.json') }}"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: [201, 409]
  when: keycloak_auth_response.status != 503
  register: create_client_bearer

- name: Check for client bearer conflict
  fail: msg="{{ service }}-bearer client already exists on the {{ KEYCLOAK_REALM }} realm"
  when: create_client_bearer.status == 409

- name: Get installation details bearer
  uri:
    url: "{{ KEYCLOAK_URI }}/auth/admin/realms/{{ KEYCLOAK_REALM }}/clients/{{ CLIENT_ID }}/installation/providers/keycloak-oidc-keycloak-json"
    method: GET
    validate_certs: no
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 200
    return_content: yes
  register: installation_bearer

- name: Encode {{ service }} credentials
  asb_encode_binding:
    fields:
      name: "{{ service }}"
      resource: "{{ service }}-bearer"
      bearer_installation: "{{ installation_bearer.content }}"
      uri: "{{ KEYCLOAK_URI }}"
      client_id: "{{ CLIENT_ID }}"
      client_secret: "{{ CLIENT_SECRET }}"
